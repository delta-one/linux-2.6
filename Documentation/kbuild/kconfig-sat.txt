Written by: Vegard Nossum <vegardno@ifi.uio.no>


Introduction
------------

This document describes how the constraints of the kconfig language are 
translated into a system of boolean constraints.


Contents
--------

1. Expressions
2. Operators
2.1. Equality
2.2. Inequality
2.3. Negation
2.4. Conjunction
2.5. Disjunction
3. Symbols and prompts.
3.1. “depends on”
3.2. “select if”
4. Choice groups
5. Defaults
A. References
B. To-do


1. Expressions
--------------

Because of the tristate logic of the kconfig language, all tristate 
expressions/values are represented with a pair of boolean 
expressions/values. We will use the notation X_y and X_m to denote 
respectively the first and second elements of this pair, where X is a 
kconfig expression. [Note: In the code, the two elements of the pair 
will be array elements with indexes 0 and 1, respectively.]

The following table lists the correspondence between tristate kconfig 
values and boolean-value pairs:

	  _______ tristate value
	 /  _____ X_y
	|  /  ___ X_m
	| |  /
	| | |

	n 0 0
	y 1 0
	m 1 1

(The combination X_y=0, X_m=1 is an impossible value, generally 
expressed by the constraint X_m -> X_y which holds for all tristate 
variables.)


2. Operators
------------

The operators of tristate expressions are the following: equality, 
inequality, negation, conjunction, and disjunction. They are defined in 
[1], but we repeat the definitions here along with the derivations of 
the equivalent boolean-pair formulae.


2.1. Equality
-------------

(A = B) is y when A and B have the same value, n otherwise.

	A       B       (A = B)
	-----------------------
	n 0 0   n 0 0   y 1 0
	n 0 0   y 1 0   n 0 0
	n 0 0   m 1 1   n 0 0
	y 1 0   n 0 0   n 0 0
	y 1 0   y 1 0   y 1 0
	y 1 0   m 1 1   n 0 0
	m 1 1   n 0 0   n 0 0
	m 1 1   y 1 0   n 0 0
	m 1 1   m 1 1   y 1 0

As can easily be seen,

	(A = B)_m ≡ 0.

Observing that (A_B)_y is true if and only if A_y and B_y are equal and 
A_m and B_m are equal, we could use the formula:

	(A = B)_y ≡ (A_y ↔ B_y) ∧ (A_m ↔ B_m)
	          ≡ (A_y ∨ ¬B_y) ∧ (¬A_y ∨ B_y) ∧ (A_m ∨ ¬B_m) ∧ (¬A_m ∨ B_m),

or we could try to minimise this by using a Karnaugh map and also 
taking into account the “don't care”-values. The variables x and y 
correspond to A_y and A_m, while z and w correspond to B_y and B_m:

	 \zw| 
	xy\ | 00 01 11 10
	----+------------
	 00 |  1  -  0  0   
	 01 |  -  -  -  -    
	 11 |  0  -  1  0   
	 10 |  0  -  0  1  

The result is:

	(A = B)_y ≡ (¬A_y ∧ ¬B_y) ∨ (A_m ∧ B_m) ∨ (A_y ∧ ¬A_m ∧ B_y ∧ ¬B_m).


2.2. Inequality
---------------

Inequality is similar to equality, in that

	(A != B)_m ≡ 0,

and that (A != B)_y is the exact opposite of (A = B)_y, i.e.:

	(A = B)_y ≡ ¬[(A_y ↔ B_y) ∧ (A_m ↔ B_m)]
	          ≡ ¬(A_y ↔ B_y) ∨ ¬(A_m ↔ B_m)
	          ≡ (A_y ↮ B_y) ∨ (A_m ↮ B_m).


2.3. Negation
-------------

	X       !X
	-------------
	n 0 0   y 1 0
	y 1 0   n 0 0
	m 1 1   m 1 1

Clearly,

	(!X)_m ≡ X_m,

and

	(!X)_y ≡ X_y → X_m.


2.4. Conjunction
----------------

	A       B       (A && B)
	-----------------------
	n 0 0   n 0 0   n 0 0
	n 0 0   y 1 0   n 0 0
	n 0 0   m 1 1   n 0 0
	y 1 0   n 0 0   n 0 0
	y 1 0   y 1 0   y 1 0
	y 1 0   m 1 1   m 1 1
	m 1 1   n 0 0   n 0 0
	m 1 1   y 1 0   m 1 1
	m 1 1   m 1 1   m 1 1

We construct the Karnaugh map for (A && B)_y:

	 \zw| 
	xy\ | 00 01 11 10
	----+------------
	 00 |  0  -  0  0
	 01 |  -  -  -  -
	 11 |  0  -  1  1
	 10 |  0  -  1  1

From this, we can see that

	(A && B)_y ≡ A_y ∧ B_y.

The Karnaugh map for (A && B)_m:

	 \zw| 
	xy\ | 00 01 11 10
	----+------------
	 00 |  0  -  0  0
	 01 |  -  -  -  -
	 11 |  0  -  1  1
	 10 |  0  -  1  0

The boolean formula:

	(A && B)_m ≡ (A_y ∧ B_m) ∨ (A_m ∧ B_y).


2.5. Disjunction
----------------

	A       B       (A || B)
	-----------------------
	n 0 0   n 0 0   n 0 0
	n 0 0   y 1 0   y 1 0
	n 0 0   m 1 1   m 1 1
	y 1 0   n 0 0   y 1 0
	y 1 0   y 1 0   y 1 0
	y 1 0   m 1 1   y 1 0
	m 1 1   n 0 0   m 1 1
	m 1 1   y 1 0   y 1 0
	m 1 1   m 1 1   m 1 1

We construct the Karnaugh map for (A || B)_y:

	 \zw| 
	xy\ | 00 01 11 10
	----+------------
	 00 |  0  -  1  1
	 01 |  -  -  -  -
	 11 |  1  -  1  1
	 10 |  1  -  1  1

Creating a single 2x2 group of 0s also covering the “don't 
care”-values, we get the formula:

	(A || B)_y ≡ ¬(¬A_y ∧ ¬B_y)
	           ≡ A_y ∨ B_y.

The Karnaugh map for (A || B)_m:

	 \zw| 
	xy\ | 00 01 11 10
	----+------------
	 00 |  0  -  1  0
	 01 |  -  -  -  -
	 11 |  1  -  1  0
	 10 |  0  -  0  0

Here, we can create three groups of 0s:

	(A || B)_m ≡ ¬[(¬A_y ∧ ¬B_y) ∨ (A_y ∧ ¬A_m) ∨ (B_y ∧ ¬B_m)]
	           ≡ ¬(¬A_y ∧ ¬B_y) ∧ ¬(A_y ∧ ¬A_m) ∧ ¬(B_y ∧ ¬B_m)]
	           ≡ (A_y ∨ B_y) ∧ (A_y → A_m) ∧ (B_y → B_m)


3. Symbols and prompts
----------------------

It is very important to keep in mind that symbols and prompts are two
different things. Symbols have a value, and it is the symbols that are used in
Kbuild makefiles and the rest of the kernel sources.

Every prompt belongs to a symbol, but a symbol can have any number of prompts.
Symbols don't themselves have dependencies, but prompts do. Prompts have two
kinds of dependencies: Firstly, a prompt may depend on an arbitrary kconfig
expression in order to be merely visible. Secondly, a prompt may depend on an
arbitrary kconfig expression in order to be selected. (Note that a prompt may
be selected even though it is invisible -- for example if it defaults to a
true value.)

Symbols depend on at least one of their prompts being selected in order to
have a true value.


3.1. “depends on”
-----------------

The “depends on” directive takes two arguments, the current prompt (the
depender) S, and a kconfig expression X (the dependency itself). The boolean
formula for this constraint is as follows:

	P_y → X_y


3.2. “select”
-------------

“select” works almost identically to “depends on”, except that it allows an
additional argument, the conditional clause C (also a kconfig expression).
If present, the boolean formula for this constraint becomes:

	(S_y ∧ C_y) → X_y,

otherwise it is the same as for “depends on”.


4. Choice groups
----------------

XXX: Write me.


5. Defaults
-----------

XXX: Write me.


A. References
-------------

1: Documentation/kbuild/kconfig-language.txt


B. To-do
--------

* Minimum unsatisfiable core set

	We could possibly use picosat_mus_assumptions() for better error reporting.

* Fix the performance of default clause generation

	build_all_default_clauses() currently has a slow implementation for
	matching clauses and symbols because it has a double loop, iterating
	first over all symbols, and then over all clauses. Ideally, each
	symbol would have a list of clauses where any of its variables
	participate, and we would only have to traverse this list once it
	has been built.

* Fix handling of string/int/hex-type symbols

	Currently, all string/int/hex-type symbols must have a value assigned
	in either the default config or the .satconfig file, because their
	values are seen as assumptions by satconfig.

	Because of this, kconfig may decide to change a _lot_ of the symbol
	values on the first run if there was no .config file to begin with,
	simply because it doesn't have any sensible defaults for these
	symbols.

	We should instead find all the places where such a symbol is compared
	to a string or number, for example in “depends on FOO=10”, and add
	the value to a list of possible choices for this variable.

	The symbol then becomes a sort of choice block where all the options
	are mutually exclusive; the solver can then find the best value if the
	user didn't specify a particular value in their .satconfig.
